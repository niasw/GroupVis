<!DOCTYPE HTML>
<html><head>
 <meta charset="gbk">
 <meta name="author" content="Sun Sibai & Liu Yu">
 <meta name="keywords" content="group visualize">
 <link rel="stylesheet" type="text/css" href="./css/main.css">
 <link rel="license" href="Apache License 2.0">
 <link rel="icon" href="./img/icon.png">
 <title>GroupVis --- Visualize Finite Group</title>
</head><body>
 <div class="wrapper"><p class="center" style="width:700px;text-align:left;line-height:1pt;padding:0;"><b>GroupVis</b></p><p class="center" style="width:700px;text-align:right;line-height:1pt;padding:0 0 10px 0;">@author <i>Sun Sibai</i> &amp; <i>Liu Yu</i></p></div>
 <!--<script src="http://d3js.org/d3.v3.min.js"></script>-->
 <script src="./lib/d3.min.js"></script>
 <script>
/** Apache License 2.0 Applies **/
/** Copyright 2014 Sun Sibai & Liu Yu **/
var nodes;
var table;
// constant declaration
var wid=700; // width
var hgh=700; // height
var txtsize=16; // text size in pt
var linsize=2; // line width in px
var circler=20; // circle radius
// function declaration
function drawinit() {
 d3.select('body').append('div').attr('class','wrapper')
   .append('svg').attr('class','chart center')
   .attr('width',wid).attr('height',hgh);
}
function drawnodes(nodes) {
 for (var node in nodes) {
  var cx=Math.random()*(wid-circler*4)+circler*2;
  var cy=Math.random()*(hgh-circler*4)+circler*2;
  d3.select('svg')
    .append('circle').attr('class','erase')
    .attr('cx',cx).attr('cy',cy).attr('r',circler);
  d3.select('svg')
    .append('circle').attr('class','nodes')
    .attr('cx',cx).attr('cy',cy).attr('r',circler);
  d3.select('svg')
    .append('text').attr('class','nodes')
    .attr('x',cx).attr('y',cy+txtsize/2.5)
    .text(nodes[node]);
 }
}
function trilin(x1,y1,x2,y2,wd) { /** return coordinates of link triangle, (x1,y1) stroke-width=wd -> (x2,y2) stroke-width=0 **/
 x1=parseFloat(x1);x2=parseFloat(x2);y1=parseFloat(y1);y2=parseFloat(y2);wd=parseFloat(wd);
 var dx=y1-y2;
 var dy=x2-x1;
 var dd=Math.sqrt(dx*dx+dy*dy);
 dx=dx/dd;dy=dy/dd;
 return [x1+dx*wd/2,y1+dy*wd/2,x2,y2,x1-dx*wd/2,y1-dy*wd/2];
}
function lineshift(x1,y1,x2,y2,flip=false) { /** shift 20%, return [[path dots],[center]] **/
 x1=parseFloat(x1);x2=parseFloat(x2);y1=parseFloat(y1);y2=parseFloat(y2);
 var dx=y1-y2;
 var dy=x2-x1;
 if (flip) {
  return [[{'x':x1,'y':y1},{'x':x1*0.7+x2*0.3+dx/5,'y':y1*0.7+y2*0.3+dy/5},{'x':x2*0.7+x1*0.3+dx/5,'y':y2*0.7+y1*0.3+dy/5},{'x':x2,'y':y2}],{'x':(x1+x2+dx/2)/2,'y':(y1+y2+dy/2)/2}];
 } else {
  return [[{'x':x1,'y':y1},{'x':x1*0.7+x2*0.3-dx/5,'y':y1*0.7+y2*0.3-dy/5},{'x':x2*0.7+x1*0.3-dx/5,'y':y2*0.7+y1*0.3-dy/5},{'x':x2,'y':y2}],{'x':(x1+x2-dx/2)/2,'y':(y1+y2-dy/2)/2}];
 }
}
function drawtable(table) {
 var cs=d3.selectAll('circle.nodes')[0]; /* all circles in svg */
console.log(cs);
 for (var rlt in table) {
  var lft=nodes.indexOf(table[rlt].left);
  var rgt=nodes.indexOf(table[rlt].right);
  var rst=nodes.indexOf(table[rlt].result);
  if (lft!=rgt) {
   var tmptrisline=trilin(cs[lft].getAttribute('cx'),cs[lft].getAttribute('cy'),cs[rgt].getAttribute('cx'),cs[rgt].getAttribute('cy'),10);
   var linefun=d3.svg.line()
              .x(function(d) {return d.x;}).y(function(d) {return d.y;})
              .interpolate('basis');
   var tmppath1=lineshift(tmptrisline[0],tmptrisline[1],tmptrisline[2],tmptrisline[3]);
   var tmppath2=lineshift(tmptrisline[2],tmptrisline[3],tmptrisline[4],tmptrisline[5],true);
   d3.select('svg').insert('path',':first-child').attr('class','sline').attr('d',linefun(tmppath1[0])+'L'+linefun(tmppath2[0]).substr(1));
  } else {
   d3.select('svg')
     .insert('circle',':first-child').attr('class','sline')
     .attr('cx',cs[lft].getAttribute('cx')).attr('cy',cs[lft].getAttribute('cy')).attr('r',circler*1.3);
  }
 }
}
/** Start **/
d3.json("./example/data/D3group.json", function(error,data) {
 if (error) {console.log(error);}
 nodes=data.nodes;
 table=data.table;
 // draw graph
 drawinit();
 drawnodes(nodes);
 drawtable(table);
});
 </script>
</body></html>
